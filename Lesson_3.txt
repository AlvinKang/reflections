When would you want to use a remote repository rather than keeping all your work local?

	You would use a remote repository when you want to collaborate with others, just simply to have a copy in the cloud for back-up sakes, or to work on those files from another device.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

	If the remote files are ahead of your own and your files are updated automatically to reflect the remote's, then your changes may be overridden.

Describe the differences between forks, clones, and branches.  When would you use one instead of another?

	Forks work similar to clones in that it copies the contents of a GitHub repository to another repository. The important point is that this is all on GitHub. Forks are used to get user's own copy of another user's repository on GitHub. Then the user would clone the forked repository to his local directory to work on the project. Branches are within one repository and are created when working on something experimental on that project.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    This allows for you to work offline on the fetched state of the remote. Then when you want to merge your progress with the remote's progress, you can do so by merging origin/master with master. If conflicts arise, you can inspect the differences, resolve them, and then merge accordingly.

How would you collaborate without using Git or GitHub?  What would be easier, and what would be harder?
	
	I would collaborate without using Git/GitHub by working in the same location, if possible. If we must work remotely, then we'd have to notify each other via text / email for every change made. This would definitely be chaotic and inefficient, ultimately throttling our progress. Collaborating with Git/GitHub would be the ideal option.

When would you want to make changes in a separate branch rather than directly in master?  What benefits does each approach have?

	You can experiment with new/different ideas/features without running the risk of breaking the main code if there is a bug in your branch.