What happens when you initialize a repository? Why do you need to do it?

	When you initialize a repository, git creates a .git metadata directory that is by default hidden by the OS. No commits are created upon repo initialization.

How is the staging area different from the working directory and the repository? What value do you think it offers?

	The staging area is where files to be committed to the directory are placed before actually being committed. This allows the user to create a single commit implementing a logical change that affects multiple files.

How can you use the staging area to make sure you have one commit per logical change?

	You can run git diff --staged to compare the file on the stage with the most recent changes (and after git add) to the file's most recent commit. If the lines committed do encapsulate one logical change, then the file in the stage is ready to be committed.


What are some situations when branches would be helpful in keeping your history organized? How would branches help?

	Branches could be used if I want to do something experimental as a tanget rather than a serious upgrade to the main project. Then I can keep working on my experimental feature like I normally do, committing logical changes as I implement different things on it.

How do the diagrams help you visualize the branch structure?

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?