What happens when you initialize a repository? Why do you need to do it?

	When you initialize a repository, git creates a .git metadata directory that is by default hidden by the OS. No commits are created upon repo initialization.

How is the staging area different from the working directory and the repository? What value do you think it offers?

	The staging area is where files to be committed to the directory are placed before actually being committed. This allows the user to create a single commit implementing a logical change that affects multiple files.

How can you use the staging area to make sure you have one commit per logical change?

	You can run git diff --staged to compare the file on the stage with the most recent changes (and after git add) to the file's most recent commit. If the lines committed do encapsulate one logical change, then the file in the stage is ready to be committed.


What are some situations when branches would be helpful in keeping your history organized? How would branches help?

	Branches could be used if I want to do something experimental as a tanget rather than a serious upgrade to the main project. Then I can keep working on my experimental feature like I normally do, committing logical changes as I implement different things on it.

How do the diagrams help you visualize the branch structure?

	The diagrams help me to see the different branches and commits; I can also see why some commits are "not reacable" and thus won't show up in a log of another branch.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

	When you merge two branches, the non-conflicting versions of the file merge together and the commit pointer points to the current branch (via git checkout) following the merge. This allows the "feature" branch to become incoporated as part of the master branch. The diagram keeps the branches as they are, but the pointer of the "feature" branch and the master branch point to a merge commit. This allows the user to see the commits from the branch via the diagram.

What are the pros and cons of Git's automatic merging vs. always doing merges manually?

	The upsides of Git's automatic merging is that whenever there aren't merge conflicts, git will handle changes from different branches automatically, leading to less hassle and more efficiency. Always merging manually would be tedious, so the user is required to merge manually when a merge conflict arises, i.e., changes to the same part of the code from two different branches. This way, the user can look at the code and, if necessary, can consult with the other branch author to discuss the final resolution before resolving the merge conflict.