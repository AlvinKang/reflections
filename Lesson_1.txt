How did viewing a diff between two versions of a file help you see the bug that was introduced?

	Using the "diff -u <old_file> <new_file>" command in the terminal, I was able to see the changes between the two files. Given that the old_file was fully functional, I can logically deduce that one of the changes made to the old_file (and saved as new_file) produced the bug. Therefore, by reading through the lines changed in the output of the command, I spotted the typo easily.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

    You can save a lot of time that would've been spent renaming files and simply being able to revert back to an old version with a click of a button without logistical and physical clutter.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google docs does?

    The advantages of manually comitting in Git are
    1) chunking off as a new version when a logical change is made
    2) being able to attach a comment for each commit that will allow interested parties to be aware of the type of change made

    The disadvantages of manually committing in Git are
    1) having to be wholly responsible for saving and writing out comments
    2) ^ can be more time-consuming as a result

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

    Git allows saving multiple files in one commit because those files may depend on each other to properly function.

How can you use the commands git log and git diff to view the history of files?

    git log shows the entire commit history of the all the files in the repository since its creation. git diff <old_commit_id> <new_commit_id> shows the actual lines added and deleted between the two files.

How might using version control make you more confident to make changes that could break something?

    git checkout <commit_id> allows the user to revert back to the code that was at the state of the commit_id, which is akin to the ultimate 'undo' button.

Now that you have your workspace set up, what do you want to try using Git for?

    I have been using git for almost a year and so I plan to continue to use it for all my programming work.
